name: Build debian
on:
  - push
  - workflow_dispatch

permissions:
  contents: write

concurrency:
  group: build
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  metadata:
    name: Gather build metadata
    runs-on: ubuntu-22.04

    outputs:
      build_ids: ${{ steps.matrix.outputs.build_ids }}
      sources: ${{ steps.matrix.outputs.sources }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: src

      - name: Check out repositories
        uses: actions/checkout@v3
        with:
          ref: repos
          path: repos

      - name: Generate build matrixes
        id: matrix
        run: |
          metadata="$(./src/.scripts/metadata.sh ./src ./repos)"
          echo "sources=$(echo "${metadata}" | jq -cM '{"source": .source}')" >> $GITHUB_OUTPUT
          echo "build_ids=$(echo "${metadata}" | jq -cM '{"build_id": .build_id}')" >> $GITHUB_OUTPUT

  sources:
    name: Sources
    runs-on: ubuntu-22.04
    needs:
      - metadata

    strategy:
      matrix: ${{ fromJSON(needs.metadata.outputs.sources) }}

    steps:
      - name: Parse metadata
        id: metadata
        run: |
          echo "repo=$(echo ${{ matrix.source }} | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "repodir=$(echo ${{ matrix.source }} | cut -d' ' -f1 | sed -e 's/-snapshot$//')" >> $GITHUB_OUTPUT
          echo "gh_fullrepo=$(echo ${{ matrix.source }} | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "gh_repo=$(echo ${{ matrix.source }} | cut -d' ' -f2 | cut -d/ -f2)" >> $GITHUB_OUTPUT
          echo "ref=$(echo ${{ matrix.source }} | cut -d' ' -f3)" >> $GITHUB_OUTPUT

      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: src

      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.metadata.outputs.gh_fullrepo }}
          ref: ${{ steps.metadata.outputs.ref }}
          path: ${{ steps.metadata.outputs.gh_repo }}
          fetch-depth: 0

      - name: Generate source
        id: source
        working-directory: ${{ steps.metadata.outputs.gh_repo }}
        run: |
          mkdir -p ../output
          "../src/${{ steps.metadata.outputs.repodir }}/source.sh" ../output

      - name: Upload source artifacts
        uses: actions/upload-artifact@v3
        with:
          name: source-${{ steps.metadata.outputs.repo }}
          path: output

  build:
    name: Build
    runs-on: ubuntu-22.04
    needs:
      - metadata
      - sources

    strategy:
      matrix: ${{ fromJSON(needs.metadata.outputs.build_ids) }}

    steps:
      - name: Parse metadata
        id: metadata
        run: |
          echo "repo=$(echo ${{ matrix.build_id }} | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "codename=$(echo ${{ matrix.build_id }} | cut -d' ' -f2 | cut -d_ -f2)" >> $GITHUB_OUTPUT
          echo "repodir=$(echo ${{ matrix.build_id }} | cut -d' ' -f1 | sed -e 's/-snapshot$//')" >> $GITHUB_OUTPUT

      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: src

      - name: Download source artifacts
        uses: actions/download-artifact@v3
        with:
          name: source-${{ steps.metadata.outputs.repo }}
          path: source

      - name: Locate source file
        id: source
        working-directory: source
        run: |
          echo "source=$(ls -1 *.orig.* | head -n 1)" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          ./src/.scripts/build.sh \
            "${{ steps.metadata.outputs.repo }}" \
            "${{ steps.metadata.outputs.codename }}" \
            "./source/${{ steps.source.outputs.source }}" \
            "./src/${{ steps.metadata.outputs.repodir }}" \
            ./output

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-${{ matrix.build_id }}
          path: output
